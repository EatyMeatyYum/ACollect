{"type":"group","name":"ACollect","enabled":true,"items":[{"type":"function","name":"onInstall","enabled":true,"code":"// Place any code here you'd like to autorun when the package is installed\nif (typeof get_variable(\"acollect\") == \"undefined\") {\n  acollect = {\n    settings:{\n      overharvestHerbs:false,\n      overharvestMinerals:false,\n      overharvestGatherables:false,\n      roomsCollected:[],\n      queue:[],\n      collecting:false,\n      riftMax:5000,\n      liquidRift:3000,\n      ingredientRift:2000\n    },\n    harvestables:{\n      ash:{ location:\"\", effect:\"When eaten, cures various afflictions relating to your sanity.\", collect:false },\n      bayberry:{ location:\"Hills\", effect:\"Gives blindness\", collect:false },\n      bellwort:{ location:\"\", effect:\"Cures unnatural tendencies to be excessively altruistic.\", collect:false },\n      bloodroot:{ location:\"\", effect:\"Cures paralysis and slickness.\", collect:false },\n      burdock:{ location:\"Forest\", effect:\"Cures the Xoran disease.\", collect:false },\n      cohosh:{ location:\"\", effect:\"Gives you insomnia, which prevents you being put to sleep.\", collect:false },\n      echinacea:{ location:\"Forest\", effect:\"Gives third eye.\", collect:false },\n      elm:{ location:\"Forest\", effect:\"(Smoked) Cures ailments such as aeon and hellsight.\", collect:false },\n      ginger:{ location:\"Forest\", effect:\"Reduces the fluid level in your body when artificially raised.\", collect:false },\n      ginseng:{ location:\"Forest\", effect:\"Cure for impurities of the blood or diseases of the skin.\", collect:false },\n      goldenseal:{ location:\"\", effect:\"Cure for body or mind in disharmony.\", collect:false },\n      hawthorn:{ location:\"Hills\", effect:\"Gives deafness.\", collect:false },\n      irid:{ location:\"Underground\", effect:\"Heals some health and mana.\", collect:false },\n      kelp:{ location:\"Water\", effect:\"Cure for weakened muscles or lower general fitness.\", collect:false },\n      kola:{ location:\"\", effect:\"Allows you to awaken from sleep immediately, at will.\", collect:false },\n      kuzu:{ location:\"\", effect:\"\", collect:false },\n      lobelia:{ location:\"Forest\", effect:\"Cure relating mainly to various types of phobias or pathos.\", collect:false },\n      myrrh:{ location:\"Forest\", effect:\"Increases your learning lesson speed.\", collect:false },\n      pear:{ location:\"Desert\", effect:\"Allows breathing underwater. Cannot be used pre-emptively.\", collect:false },\n      sileris:{ location:\"\", effect:\"(Applied) Defends against Serpent class fang attacks.\", collect:false },\n      skullcap:{ location:\"\", effect:\"(Eaten) Gives deathsight. (Smoked) Anti-weapon field that lasts until taken down by others or you act aggressively. Causes weapons attacks to rebound.\", collect:false },\n      slipper:{ location:\"\", effect:\"\", collect:false },\n      valerian:{ location:\"Mountain\", effect:\"(Smoked) Cures the disfigurement and slickness afflictions.\", collect:false },\n      weed:{ location:\"Desert\", effect:\"\", collect:false }\n    },\n    extractables:{\n      antimony:{ location:\"\", effect:\"\", collect:false },\n      argentum:{ location:\"\", effect:\"\", collect:false },\n      arsenic:{ location:\"\", effect:\"\", collect:false },\n      aurum:{ location:\"\", effect:\"\", collect:false },\n      azurite:{ location:\"\", effect:\"\", collect:false },\n      bisemutum:{ location:\"\", effect:\"\", collect:false },\n      calamine:{ location:\"\", effect:\"\", collect:false },\n      calcite:{ location:\"\", effect:\"\", collect:false },\n      cinnabar:{ location:\"\", effect:\"\", collect:false },\n      cuprum:{ location:\"\", effect:\"\", collect:false },\n      dolomite:{ location:\"\", effect:\"\", collect:false },\n      ferrum:{ location:\"\", effect:\"\", collect:false },\n      gypsum:{ location:\"\", effect:\"\", collect:false },\n      magnesium:{ location:\"\", effect:\"\", collect:false },\n      malachite:{ location:\"\", effect:\"\", collect:false },\n      plumbum:{ location:\"\", effect:\"\", collect:false },\n      potash:{ location:\"\", effect:\"\", collect:false },\n      quartz:{ location:\"\", effect:\"\", collect:false },\n      quicksilver:{ location:\"\", effect:\"\", collect:false },\n      realgar:{ location:\"\", effect:\"\", collect:false },\n      stannum:{ location:\"\", effect:\"\", collect:false }\n    },\n    gatherables:{\n      clay:{ location:\"\", effect:\"\", collect:false },\n      saltwater:{ location:\"\", effect:\"\", collect:false },\n      fruit:{ location:\"\", effect:\"\", collect:false },\n      grain:{ location:\"\", effect:\"\", collect:false },\n      vegetables:{ location:\"\", effect:\"\", collect:false },\n      eggs:{ location:\"\", effect:\"\", collect:false },\n      milk:{ location:\"\", effect:\"\", collect:false },\n      nuts:{ location:\"\", effect:\"\", collect:false },\n      olives:{ location:\"\", effect:\"\", collect:false },\n      sugarcane:{ location:\"\", effect:\"\", collect:false },\n      lumic:{ location:\"\", effect:\"\", collect:false },\n      cacao:{ location:\"\", effect:\"\", collect:false },\n      dust:{ location:\"\", effect:\"\", collect:false }\n    },\n    extractLocations:{\n      'Moghedu':\"bisemutum\",\n      'Manara Burrow':\"dolomite\",\n      'the Caverns of Nuskuwe':\"dolomite\",\n      \"the Island of Tuar\":\"magnesium\",\n      \"The Digsite of the Soul\":'plumbum',\n      \"The Digsite of Waves\":'realgar',\n      \"New Thera\":'ferrum',\n      \"the Isle of Polyargos\":'magnesium',\n      \"the Mirror Caves\":'aurum',\n      \"Hashan\":'realgar',\n      \"the Siroccian Mountains\":'calcite',\n      \"a Dwarven camp\":'malachite',\n      \"an Orcish outpost\":'malachite',\n      \"the Sunderlands\":'plumbum',\n      \"Mainad har'bain\":'plumbum',\n      \"Judgement Mountain\":'arsenic',\n      \"the Central Vasnari Mountains\":'arsenic',\n      \"the Northern Vasnari Mountains\":'calcite',\n      \"Shastaan\":'magnesium', \n      \"the Eastern Shore\":'stannum',\n      \"a filthy goblin village\":'stannum',\n      \"the Mhojave Desert\":'stannum',\n      \"the Village of Tomacula\":'antimony',\n      \"the Chapel of All Gods\":'antimony',\n      \"the Dungeon of the Beastlords\":'gypsum',\n      \"a network of caves beneath New Thera\":'aurum',\n      \"the Den of the Quisalis\":'gypsum',\n      \"the Sarave Foothills\":'antimony',\n      \"Squall Cleft\":'quicksilver',\n      \"the Asterian Peninsula\":'antimony',\n      \"Sparrow's Rest\":'antimony',\n      \"The Digsite of Equilibrium\":'antimony',\n      \"the Island off the Northern Vashnars\":'argentum',\n      \"the Halls of Blackrock\":'aurum', \n      \"the Caves of Delmarin\":'dolomite',\n      \"the village of Tasur'ke\":'calamine',\n      \"the Vashnar Mountains\":'malachite',\n      \"the Savannah\":'azurite', \n      \"the Southern Vashnar Mountains\":'malachite',\n      \"the Ilyrean Tundra\":'calamine', \n      \"The Digsite of Rage\":'magnesium',\n      \"The Digsite of the Mind\":'ferrum', \n      \"Maim's Mansion\":'ferrum',\n      \"The Digsite of War\":'stannum', \n      \"the Thraasi Foothills\":'calamine',\n      \"the Valho Coast\":'calamine', \n      \"the Shamtota Hills\":'potash',\n      \"The Digsite of Discord\":'argentum',\n      \"Inbhir Ness\":'potash',\n      \"Wegava Valley\":'azurite',\n      \"the Village of Milena\":'antimony', \n      \"the Northreach Forest\":'cuprum',\n      \"the Granite Hills\":'ferrum',\n      \"the Mines of Iskadar\":'aurum',\n      \"the Barony of Dun Valley\":'realgar',\n      \"the Eastern Ithmia\":'azurite',\n    }\n  }\n  set_variable(\"acollect\", acollect);\n} else {\n  acollect = get_variable(\"acollect\");\n  acollect.settings.roomsCollected = [];\n  set_variable(\"acollect\", acollect);\n}\n\ndisplay_notice(\"ACollect Loaded\");\n\neventBus.unsubscribe('onBal', 'runACollectQueue');\n\nconst runHarvestQueue = function() {\n  if(acollect.settings.queue[0]) {\n    send_command(acollect.settings.queue[0]);\n    acollect.settings.queue.shift();\n    send_command(\"inr all\");\n  }\n}\n\neventBus.subscribe('onBal', runHarvestQueue, 'runACollectQueue');"},{"type":"function","name":"onUninstall","enabled":true,"code":"// Place any code here you'd like to autorun when the package is uninstalled"},{"type":"function","name":"onGMCP","enabled":true,"code":"if(args.gmcp_method == \"Room.Info\") {\n  if (acollect.settings.collecting) {\n    const roomEnvironment = args.gmcp_args.environment;\n    const roomNum = args.gmcp_args.num;\n    const areaName = args.gmcp_args.area;\n    \n    if (!acollect.settings.roomsCollected.includes(roomNum)) {\n      acollect.settings.roomsCollected.push(roomNum);\n      set_variable(\"acollect\", acollect);\n      send_command(\"acollect collect\");\n    }\n  }\n}"},{"type":"function","name":"onLoad","enabled":true,"code":"if (typeof get_variable(\"acollect\") == \"undefined\") {\n  display_notice(\"ACollect not found, creating ACollect settings NOW\", \"orange\");\n  acollect = {\n    settings:{\n      overharvestHerbs:false,\n      overharvestMinerals:false,\n      overharvestGatherables:false,\n      roomsCollected:[],\n      queue:[],\n      collecting:false,\n      riftMax:5000,\n      liquidRift:3000,\n      ingredientRift:2000\n    },\n    harvestables:{\n      ash:{ location:\"\", effect:\"When eaten, cures various afflictions relating to your sanity.\", collect:false },\n      bayberry:{ location:\"Hills\", effect:\"Gives blindness\", collect:false },\n      bellwort:{ location:\"\", effect:\"Cures unnatural tendencies to be excessively altruistic.\", collect:false },\n      bloodroot:{ location:\"\", effect:\"Cures paralysis and slickness.\", collect:false },\n      burdock:{ location:\"Forest\", effect:\"Cures the Xoran disease.\", collect:false },\n      cohosh:{ location:\"\", effect:\"Gives you insomnia, which prevents you being put to sleep.\", collect:false },\n      echinacea:{ location:\"Forest\", effect:\"Gives third eye.\", collect:false },\n      elm:{ location:\"Forest\", effect:\"(Smoked) Cures ailments such as aeon and hellsight.\", collect:false },\n      ginger:{ location:\"Forest\", effect:\"Reduces the fluid level in your body when artificially raised.\", collect:false },\n      ginseng:{ location:\"Forest\", effect:\"Cure for impurities of the blood or diseases of the skin.\", collect:false },\n      goldenseal:{ location:\"\", effect:\"Cure for body or mind in disharmony.\", collect:false },\n      hawthorn:{ location:\"Hills\", effect:\"Gives deafness.\", collect:false },\n      irid:{ location:\"Underground\", effect:\"Heals some health and mana.\", collect:false },\n      kelp:{ location:\"Water\", effect:\"Cure for weakened muscles or lower general fitness.\", collect:false },\n      kola:{ location:\"\", effect:\"Allows you to awaken from sleep immediately, at will.\", collect:false },\n      kuzu:{ location:\"\", effect:\"\", collect:false },\n      lobelia:{ location:\"Forest\", effect:\"Cure relating mainly to various types of phobias or pathos.\", collect:false },\n      myrrh:{ location:\"Forest\", effect:\"Increases your learning lesson speed.\", collect:false },\n      pear:{ location:\"Desert\", effect:\"Allows breathing underwater. Cannot be used pre-emptively.\", collect:false },\n      sileris:{ location:\"\", effect:\"(Applied) Defends against Serpent class fang attacks.\", collect:false },\n      skullcap:{ location:\"\", effect:\"(Eaten) Gives deathsight. (Smoked) Anti-weapon field that lasts until taken down by others or you act aggressively. Causes weapons attacks to rebound.\", collect:false },\n      slipper:{ location:\"\", effect:\"\", collect:false },\n      valerian:{ location:\"Mountain\", effect:\"(Smoked) Cures the disfigurement and slickness afflictions.\", collect:false },\n      weed:{ location:\"Desert\", effect:\"\", collect:false }\n    },\n    extractables:{\n      antimony:{ location:\"\", effect:\"\", collect:false },\n      argentum:{ location:\"\", effect:\"\", collect:false },\n      arsenic:{ location:\"\", effect:\"\", collect:false },\n      aurum:{ location:\"\", effect:\"\", collect:false },\n      azurite:{ location:\"\", effect:\"\", collect:false },\n      bisemutum:{ location:\"\", effect:\"\", collect:false },\n      calamine:{ location:\"\", effect:\"\", collect:false },\n      calcite:{ location:\"\", effect:\"\", collect:false },\n      cinnabar:{ location:\"\", effect:\"\", collect:false },\n      cuprum:{ location:\"\", effect:\"\", collect:false },\n      dolomite:{ location:\"\", effect:\"\", collect:false },\n      ferrum:{ location:\"\", effect:\"\", collect:false },\n      gypsum:{ location:\"\", effect:\"\", collect:false },\n      magnesium:{ location:\"\", effect:\"\", collect:false },\n      malachite:{ location:\"\", effect:\"\", collect:false },\n      plumbum:{ location:\"\", effect:\"\", collect:false },\n      potash:{ location:\"\", effect:\"\", collect:false },\n      quartz:{ location:\"\", effect:\"\", collect:false },\n      quicksilver:{ location:\"\", effect:\"\", collect:false },\n      realgar:{ location:\"\", effect:\"\", collect:false },\n      stannum:{ location:\"\", effect:\"\", collect:false }\n    },\n    gatherables:{\n      clay:{ location:\"\", effect:\"\", collect:false },\n      saltwater:{ location:\"\", effect:\"\", collect:false },\n      fruit:{ location:\"\", effect:\"\", collect:false },\n      grain:{ location:\"\", effect:\"\", collect:false },\n      vegetables:{ location:\"\", effect:\"\", collect:false },\n      eggs:{ location:\"\", effect:\"\", collect:false },\n      milk:{ location:\"\", effect:\"\", collect:false },\n      nuts:{ location:\"\", effect:\"\", collect:false },\n      olives:{ location:\"\", effect:\"\", collect:false },\n      sugarcane:{ location:\"\", effect:\"\", collect:false },\n      lumic:{ location:\"\", effect:\"\", collect:false },\n      cacao:{ location:\"\", effect:\"\", collect:false },\n      dust:{ location:\"\", effect:\"\", collect:false }\n    },\n    extractLocations:{\n      'Moghedu':\"bisemutum\",\n      'Manara Burrow':\"dolomite\",\n      'the Caverns of Nuskuwe':\"dolomite\",\n      \"the Island of Tuar\":\"magnesium\",\n      \"The Digsite of the Soul\":'plumbum',\n      \"The Digsite of Waves\":'realgar',\n      \"New Thera\":'ferrum',\n      \"the Isle of Polyargos\":'magnesium',\n      \"the Mirror Caves\":'aurum',\n      \"Hashan\":'realgar',\n      \"the Siroccian Mountains\":'calcite',\n      \"a Dwarven camp\":'malachite',\n      \"an Orcish outpost\":'malachite',\n      \"the Sunderlands\":'plumbum',\n      \"Mainad har'bain\":'plumbum',\n      \"Judgement Mountain\":'arsenic',\n      \"the Central Vasnari Mountains\":'arsenic',\n      \"the Northern Vasnari Mountains\":'calcite',\n      \"Shastaan\":'magnesium', \n      \"the Eastern Shore\":'stannum',\n      \"a filthy goblin village\":'stannum',\n      \"the Mhojave Desert\":'stannum',\n      \"the Village of Tomacula\":'antimony',\n      \"the Chapel of All Gods\":'antimony',\n      \"the Dungeon of the Beastlords\":'gypsum',\n      \"a network of caves beneath New Thera\":'aurum',\n      \"the Den of the Quisalis\":'gypsum',\n      \"the Sarave Foothills\":'antimony',\n      \"Squall Cleft\":'quicksilver',\n      \"the Asterian Peninsula\":'antimony',\n      \"Sparrow's Rest\":'antimony',\n      \"The Digsite of Equilibrium\":'antimony',\n      \"the Island off the Northern Vashnars\":'argentum',\n      \"the Halls of Blackrock\":'aurum', \n      \"the Caves of Delmarin\":'dolomite',\n      \"the village of Tasur'ke\":'calamine',\n      \"the Vashnar Mountains\":'malachite',\n      \"the Savannah\":'azurite', \n      \"the Southern Vashnar Mountains\":'malachite',\n      \"the Ilyrean Tundra\":'calamine', \n      \"The Digsite of Rage\":'magnesium',\n      \"The Digsite of the Mind\":'ferrum', \n      \"Maim's Mansion\":'ferrum',\n      \"The Digsite of War\":'stannum', \n      \"the Thraasi Foothills\":'calamine',\n      \"the Valho Coast\":'calamine', \n      \"the Shamtota Hills\":'potash',\n      \"The Digsite of Discord\":'argentum',\n      \"Inbhir Ness\":'potash',\n      \"Wegava Valley\":'azurite',\n      \"the Village of Milena\":'antimony', \n      \"the Northreach Forest\":'cuprum',\n      \"the Granite Hills\":'ferrum',\n      \"the Mines of Iskadar\":'aurum',\n      \"the Barony of Dun Valley\":'realgar',\n      \"the Eastern Ithmia\":'azurite',\n    }\n  }\n  set_variable(\"acollect\", acollect);\n} else {\n  acollect = get_variable(\"acollect\");\n  acollect.settings.roomsCollected = [];\n  set_variable(\"acollect\", acollect);\n  display_notice(\"ACollect FOUND and LOADED!\", \"orange\");\n}\n\ndisplay_notice(\"ACollect Loaded\");\n\neventBus.unsubscribe('onBal', 'runACollectQueue');\n\nconst runHarvestQueue = function() {\n  if(acollect.settings.queue[0]) {\n    send_command(acollect.settings.queue[0]);\n    acollect.settings.queue.shift();\n    send_command(\"inr all\");\n  }\n}\n\neventBus.subscribe('onBal', runHarvestQueue, 'runACollectQueue');"},{"type":"alias","name":"","enabled":true,"actions":[{"type":"wait","enabled":true,"seconds":0,"milliseconds":1},{"type":"script","enabled":true,"script":"//Enter the script here\nif (acollect.settings.collecting == true) {\n  // HARVESTING\n  if (GMCP.Room.Info.environment == \"Forest\" || GMCP.Room.Info.environment == \"Garden\") {\n    if (acollect.harvestables.echinacea.collect) {\n      if (GMCP.Rift.echinacea.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest echinacea\");\n      }\n    }\n    if (acollect.harvestables.ginger.collect) {\n      if (GMCP.Rift.ginger.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest ginger\");\n      }\n    }\n    if (acollect.harvestables.lobelia.collect) {\n      if (GMCP.Rift.lobelia.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest lobelia\");\n      }\n    }\n    if (acollect.harvestables.ginseng.collect) {\n      if (GMCP.Rift.ginseng.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest ginseng\");\n      }\n    }\n    if (acollect.harvestables.myrrh.collect) {\n      if (GMCP.Rift.myrrh.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest myrrh\");\n      }\n    }\n    if (acollect.harvestables.elm.collect) {\n      if (GMCP.Rift.elm.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest elm\");\n      }\n    }\n    if (acollect.harvestables.burdock.collect) {\n      if (GMCP.Rift.burdock.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest burdock\");\n      }\n    }\n  }\n  if (GMCP.Room.Info.environment == \"Jungle\") {\n    if (acollect.harvestables.kuzu.collect) {\n      if (GMCP.Rift.kuzu.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest kuzu\");\n      }\n    }\n    if (acollect.harvestables.kola.collect) {\n      if (GMCP.Rift.kola.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest kola\");\n      }\n    }\n    if (acollect.harvestables.skullcap.collect) {\n      if (GMCP.Rift.skullcap.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest skullcap\");\n      }\n    }\n  }\n  if (GMCP.Room.Info.environment == \"Grasslands\") {\n    if (acollect.harvestables.goldenseal.collect) {\n      if (GMCP.Rift.goldenseal.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest goldenseal\");\n      }\n    }\n    if (acollect.harvestables.slipper.collect) {\n      if (GMCP.Rift.slipper.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest slipper\");\n      }\n    }\n  }\n  if (GMCP.Room.Info.environment == \"Natural underground\") {\n    if (acollect.harvestables.irid.collect) {\n      if(GMCP.Rift.moss.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest moss\");\n      }\n    }\n    if (acollect.harvestables.bloodroot.collect) {\n      if (GMCP.Rift.bloodroot.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest bloodroot\");\n      }\n    }\n  }\n  if (GMCP.Room.Info.environment == \"Hills\") {\n    if (acollect.harvestables.hawthorn.collect) {\n      if (GMCP.Rift.hawthorn.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest hawthorn\");\n      }\n    }\n    if (acollect.harvestables.bayberry.collect) {\n      if(GMCP.Rift.bayberry.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest bayberry\");\n      }\n    }\n  }\n  if (GMCP.Room.Info.environment == \"Mountains\") {\n    if (acollect.harvestables.valerian.collect) {\n      if (GMCP.Rift.valerian.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest valerian\");\n      }\n    }\n  }\n  if (GMCP.Room.Info.environment == \"Swamp\") {\n    if (acollect.harvestables.cohosh.collect) {\n      if (GMCP.Rift.cohosh.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest cohosh\");\n      }\n    }\n    if (acollect.harvestables.bellwort.collect) {\n      if (GMCP.Rift.bellwort.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest bellwort\");\n      }\n    }\n    if (acollect.harvestables.ash.collect) {\n      if (GMCP.Rift.ash.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest ash\");\n      }\n    }\n  }\n  if (GMCP.Room.Info.environment == \"Valley\") {\n    if (acollect.harvestables.sileris.collect) {\n      if (GMCP.Rift.sileris.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest sileris\");\n      }\n    }\n  }\n  if (GMCP.Room.Info.environment == \"Desert\") {\n    if (acollect.harvestables.pear.collect) {\n      if (GMCP.Rift.pear.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest pear\");\n      }\n    }\n  }\n  if (GMCP.Room.Info.environment == \"Ocean\" || GMCP.Room.Info.environment == \"Freshwater\" || GMCP.Room.Info.environment == \"River\") {\n    if (acollect.harvestables.kelp.collect) {\n      if (GMCP.Rift.kelp.amount < acollect.settings.riftMax || acollect.settings.overharvestHerbs) {\n        acollect.settings.queue.push(\"harvest kelp\");\n      }\n    }\n  }\n\n  // EXTRACTING\n  if(GMCP.Room.Info.environment == \"Natural underground\" || GMCP.Room.Info.environment == \"Constructed underground\" || GMCP.Room.Info.environment == \"Mountains\" || GMCP.Room.Info.environment==\"Magma Caves\") {\n    if (typeof acollect.extractLocations[GMCP.Room.Info.area] != \"undefined\") {\n      if (acollect.extractables[acollect.extractLocations[GMCP.Room.Info.area]].collect || acollect.settings.overharvestMinerals) {\n        acollect.settings.queue.push(`extract ${acollect.extractLocations[GMCP.Room.Info.area]}`);\n      }\n    }\n  }\n\n  // GATHERING\n  if (GMCP.Room.Info.environment == \"Garden\") {\n    if (acollect.gatherables.fruit.collect) {\n      if (GMCP.Rift.fruit.amount < acollect.settings.ingredientRift || acollect.settings.overharvestGatherables) {\n        acollect.settings.queue.push(\"gather fruit\");\n      }\n    }\n    if (acollect.gatherables.vegetables.collect) {\n      if (GMCP.Rift.vegetable.amount < acollect.settings.ingredientRift || acollect.settings.overharvestGatherables) {\n        acollect.settings.queue.push(\"gather vegetable\");\n      }\n    }\n  }\n  if (GMCP.Room.Info.environment == \"Forest\") {\n    if (acollect.gatherables.nuts.collect) {\n      if (GMCP.Rift.nut.amount < acollect.settings.ingredientRift || acollect.settings.overharvestGatherables) {\n        acollect.settings.queue.push(\"gather nuts\");\n      }\n    }\n  }\n  if (GMCP.Room.Info.environment == \"Natural underground\") {\n    if (acollect.gatherables.dust.collect) {\n      if (GMCP.Rift.dust.amount < acollect.settings.riftMax || acollect.settings.overharvestGatherables) {\n        acollect.settings.queue.push(\"gather dust\");\n      }\n    }\n    if (acollect.gatherables.lumic.collect) {\n      if (GMCP.Rift['lumic moss'].amount < acollect.settings.riftMax || acollect.settings.overharvestGatherables) {\n        acollect.settings.queue.push(\"gather lumic\");\n      }\n    }\n  }\n  if (GMCP.Room.Info.environment == \"Jungle\") {\n    if (acollect.gatherables.cacao.collect) {\n      if (GMCP.Rift.cacao.amount < acollect.settings.ingredientRift || acollect.settings.overharvsetGatherables) {\n        acollect.settings.queue.push(\"gather cacao\");\n      }\n    }\n  }\n  if (GMCP.Room.Info.environment == \"River\") {\n    if (acollect.gatherables.clay.collect) {\n      if (GMCP.Rift.clay.amount < acollect.settings.riftMax || acollect.settings.overharvestGatherables) {\n        acollect.settings.queue.push(\"gather clay\");\n      }\n    }\n  }\n  \n  eventBus.raise('onBal');\n}"}],"text":"acollect collect","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"List","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nvar allHarvest = Object.keys(acollect.harvestables);\nvar tbl = \"<table>\";\nallHarvest.forEach(function(el) {\n  tbl += \"<tr><td width='15%'>\" + el + \"</td><td width='20%'>\" + acollect.harvestables[el].location + \"</td><td width='65%'>\" + acollect.harvestables[el].effect + \"</td></tr>\";\n});\n\ntbl += \"</table>\";\n\nnexusclient.add_html_line(tbl);"}],"text":"acollect list","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nlet index = 1;\nconst allHerbs = Object.keys(acollect.harvestables);\n\nlet str = \"<span style='color:white'>Harvestables:</br>\";\nstr += \"-----------------------------------------------</br></span>\";\nstr += `<span onClick='acollect.settings.overharvestHerbs  = !acollect.settings.overharvestHerbs;nexusclient.send_commands(\"acollect select herbs\");nexusclient.variables().set(\"acollect\", acollect)'>(${(acollect.settings.overharvestHerbs == true) ? 'X' : '&nbsp;&nbsp;'}) Overharvest Herbs</span></br>`;\nstr += `Rift max: ${acollect.settings.riftMax} [acollect setrift # to change]`;\nstr += `<table style=\"width:100%\">`;\nallHerbs.forEach(function(el) {\n  str += `${(index == 1) ? '<tr>' : ''}<td width='33%'><span onClick='acollect.harvestables[\"${el}\"].collect  = !acollect.harvestables[\"${el}\"].collect;nexusclient.send_commands(\"acollect select herbs\");nexusclient.variables().set(\"acollect\", acollect)'>[ ${(acollect.harvestables[el].collect == true) ? 'X' : '&nbsp;&nbsp;'} ] ${el}</span></td>${(index == 3) ? '</tr>' : ''}`;\n  (index >= 3) ? index = 1 : index += 1;\n})\n\nnexusclient.add_html_line(str);\n"}],"text":"acollect select (herbs|plants|harvest|harvestables)","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"function","enabled":true,"fn":"onLoad"}],"text":"acollect reset","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nlet index = 1;\nconst allMinerals = Object.keys(acollect.extractables);\n\nstr = \"<span style='color:white'>Extractables:</br>\";\nstr += \"-----------------------------------------------</br></span>\";\nstr += `<span onClick='acollect.settings.overharvestMinerals  = !acollect.settings.overharvestMinerals;nexusclient.send_commands(\"acollect select minerals\");nexusclient.variables().set(\"acollect\", acollect)'>(${(acollect.settings.overharvestMinerals == true) ? 'X' : '&nbsp;&nbsp;'}) Overharvest Minerals</span></br>`;\nstr += `Rift max: ${acollect.settings.riftMax} [acollect setrift # to change]`;\nstr += `<table style=\"width:100%\">`;\nallMinerals.forEach(function(el) {\n  str += `${(index == 1) ? '<tr>' : ''}<td width='33%'><span onClick='acollect.extractables[\"${el}\"].collect  = !acollect.extractables[\"${el}\"].collect;nexusclient.send_commands(\"acollect select minerals\");nexusclient.variables().set(\"acollect\", acollect)'>[ ${(acollect.extractables[el].collect == true) ? 'X' : '&nbsp;&nbsp;'} ] ${el}</span></td>${(index == 3) ? '</tr>' : ''}`;\n  (index >= 3) ? index = 1 : index += 1;\n})\n\nnexusclient.add_html_line(str);"}],"text":"acollect select (minerals|extractables|extract)","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\n//Enter the script here\nlet index = 1;\nconst allGathers = Object.keys(acollect.gatherables);\n\nstr = \"<span style='color:white'>Gatherables:</br>\";\nstr += \"-----------------------------------------------</br></span>\";\nstr += `<span onClick='acollect.settings.overharvestGatherables  = !acollect.settings.overharvestGatherables;nexusclient.send_commands(\"acollect select gatherables\");nexusclient.variables().set(\"acollect\", acollect)'>(${(acollect.settings.overharvestGatherables == true) ? 'X' : '&nbsp;&nbsp;'}) Overharvest Gatherables</span></br>`;\nstr += `Liquid Rift: ${acollect.settings.liquidRift} [acollect setliquidrift # to change]</br>`;\nstr += `Ingredient Rift: ${acollect.settings.ingredientRift} [acollect setingredientrift # to change]`;\nstr += `<table style=\"width:100%\">`;\nallGathers.forEach(function(el) {\n  str += `${(index == 1) ? '<tr>' : ''}<td width='33%'><span onClick='acollect.gatherables[\"${el}\"].collect  = !acollect.gatherables[\"${el}\"].collect;nexusclient.send_commands(\"acollect select gatherables\");nexusclient.variables().set(\"acollect\", acollect)'>[ ${(acollect.gatherables[el].collect == true) ? 'X' : '&nbsp;&nbsp;'} ] ${el}</span></td>${(index == 3) ? '</tr>' : ''}`;\n  (index >= 3) ? index = 1 : index += 1;\n})\n\nnexusclient.add_html_line(str);"}],"text":"acollect select (gatherables|gather)","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ndisplay_notice(\"ACollect RESET\", \"red\");\nacollect.settings.roomsCollected = [];\nset_variable(\"acollect\", acollect);"}],"text":"^It is now the (.*) years after the fall of the Seleucarian Empire.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nconst state = args[1];\n\nif (state == \"on\") {\n  acollect.settings.collecting = true;\n  set_variable(\"acollect\", acollect);\n  display_notice(\"[ACOLLECT] Collecting turned ON!\", \"orange\");\n} else if (state == \"off\") {\n  acollect.settings.collecting = false;\n  set_variable(\"acollect\", acollect);\n  display_notice(\"[ACOLLECT] Collecting turned OFF!\", \"orange\");\n} else if (state == \"toggle\") {\n  acollect.settings.collecting = !acollect.settings.collecting;\n  set_variable(\"acollect\", acollect);\n  (acollect.settings.collecting) ? display_notice(\"[ACOLLECT] Collecting turned ON!\", \"orange\") : display_notice(\"[ACOLLECT] Collecting turned OFF\", \"orange\");\n}"}],"text":"acollect (on|off|toggle)","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nconst maxrift = args[1];\n\nacollect.settings.riftMax = maxrift;\nset_variable(\"acollect\", acollect);\ndisplay_notice(`[ACOLLECT] Rift Max set to ${acollect.settings.riftMax}`, \"yellow\");"}],"text":"acollect setrift (\\d+)","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nconst herb = args[2];\nconst amount = args[1];\n\ndisplay_notice(\"[\", \"white\", \"\", \"HARVEST\", \"yellow\", \"\", \"]: \", \"white\", \"\", herb, \"cyan\", \"\", \" - \", \"white\", \"\", amount, \"cyan\", \"\");"},{"type":"gag","enabled":true}],"text":"You reach out and carefully harvest (\\d+) (.+).","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nconst action = args[1];\nconst item = args[2];\nconst amount = args[3];\nconst total = args[4];\n\ndisplay_notice(\"[\", \"white\", \"\", \"RIFT\", \"yellow\", \"\", \"]: \", \"white\", \"\", item, \"cyan\", \"\", \" - \", \"white\", \"\", `${amount} ${(action == \"store\") ? \"STORED\" : \"REMOVED\"} [${total} total]`, \"cyan\", \"\");"},{"type":"gag","enabled":true}],"text":"You (store|remove) (\\d+) (.+), bringing the total in the rift to (\\d+).","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nconst maxrift = args[1];\n\nacollect.settings.liquidRift = maxrift;\nset_variable(\"acollect\", acollect);\ndisplay_notice(`[ACOLLECT] Liquid Rift set to ${acollect.settings.liquidRift}`, \"yellow\");"}],"text":"acollect setliquidrift (\\d+)","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nconst maxrift = args[1];\n\nacollect.settings.ingredientRift = maxrift;\nset_variable(\"acollect\", acollect);\ndisplay_notice(`[ACOLLECT] Ingredient Rift set to ${acollect.settings.ingredientRift}`, \"yellow\");"}],"text":"acollect setingredientrift (\\d+)","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nset_variable(\"acollect\", acollect);\ndisplay_notice(\"ACollect SAVED\", \"orange\");"}],"text":"acollect save","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nlet locations;\nconst mineral = args[1];\nconst extractArray = Object.keys(acollect.extractLocations);\n\ndisplay_notice(mineral + \" can be found at: \", \"red\");\nextractArray.forEach(function(el) {\n    if(acollect.extractLocations[el]==mineral) {\n        display_notice(mineral + \": \" + el, \"yellow\");\n    }\n});"}],"text":"acollect mineral locate (\\w+)","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nconst mineral = args[2];\nconst amount = args[1];\n\ndisplay_notice(\"[\", \"white\", \"\", \"EXTRACT\", \"yellow\", \"\", \"]: \", \"white\", \"\", mineral, \"cyan\", \"\", \" - \", \"white\", \"\", amount, \"cyan\", \"\");\ngag_current_line();"}],"text":"You kneel and collect chunks of earth, using a strong-smelling solvent to pull a group of (\\d+) (.+) from the dirt and rock. This delicate process completed, you set the minerals aside to dry.","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nif (typeof get_variable(\"acollect\") == \"undefined\") {\n  display_notice(\"NOT FOUND\");\n} else {\n  display_notice(\"FOUND\");\n}"}],"text":"colltest","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true}],"description":""}